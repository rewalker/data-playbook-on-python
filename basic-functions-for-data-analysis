#Key Concepts Demonstrated:
#1.Create a DataFrame.
#2.Check for missing values.
#3.Identify data types.
#4.Rename columns.
#5.Select specific columns.
#6.Filter rows by condition.
#7.Create a calculated column.
#8.Drop columns.
#9.Count unique values.
#10.List unique values.
#11.Sort data.
#12.Reset index.
#13.Group and aggregate.
#14.Pivot table.
#15.Replace values.
#16.Handle duplicates.
#17.Conditional column creation.
#18.Sample data.
#19.Merge DataFrames.
#20.Multi-index operations.
#21.Drop rows.
#22.One-hot encoding (dummy variables).
#23.Correlation analysis.
#24.Plot data.
#25.Export to Excel.
#26.Append DataFrames
#27.Transpose DataFrames


# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


# 1. Create a sample DataFrame
data = {
    "Employee": ["Alice", "Bob", "Charlie", "David", "Eva"],
    "Department": ["HR", "Finance", "IT", "HR", "IT"],
    "Age": [25, 30, 35, 40, 29],
    "Salary": [50000, 60000, 55000, 65000, 70000],
    "Years_at_Company": [1, 3, 5, 10, 2]
}
df = pd.DataFrame(data)
print("\n1. Sample DataFrame:")
print(df)

# 2. Check for missing values
print("\n2. Check for Missing Values:")
print(df.isnull())

# 3. Data types of each column
print("\n3. Data Types:")
print(df.dtypes)

# 4. Renaming a column
df.rename(columns={"Salary": "Annual_Salary"}, inplace=True)
print("\n4. DataFrame with Renamed Column:")
print(df)

# 5. Selecting specific columns
print("\n5. Selecting Specific Columns (Employee and Age):")
print(df[["Employee", "Age"]])

# 6. Filtering rows based on conditions
filtered_data = df[df["Age"] > 30]
print("\n6. Employees Older Than 30:")
print(filtered_data)

# 7. Creating a new calculated column
df["Monthly_Salary"] = df["Annual_Salary"] / 12
print("\n7. DataFrame with Monthly Salary Column:")
print(df)

# 8. Dropping a column
df.drop(columns=["Monthly_Salary"], inplace=True)
print("\n8. DataFrame After Dropping 'Monthly_Salary':")
print(df)

# 9. Counting unique values in a column
unique_departments = df["Department"].nunique()
print("\n9. Number of Unique Departments:")
print(unique_departments)

# 10. Getting unique values from a column
unique_values = df["Department"].unique()
print("\n10. Unique Department Names:")
print(unique_values)

# 11. Sorting values
sorted_by_age = df.sort_values(by="Age", ascending=True)
print("\n11. DataFrame Sorted by Age (Ascending):")
print(sorted_by_age)

# 12. Resetting index
reset_df = sorted_by_age.reset_index(drop=True)
print("\n12. DataFrame After Resetting Index:")
print(reset_df)

# 13. Grouping and aggregating data
average_salary_by_department = df.groupby("Department")["Annual_Salary"].mean()
print("\n13. Average Annual Salary by Department:")
print(average_salary_by_department)

# 14. Pivot tables
pivot_table = df.pivot_table(values="Annual_Salary", index="Department", aggfunc="mean")
print("\n14. Pivot Table of Average Salary by Department:")
print(pivot_table)

# 15. Replacing values
df["Department"] = df["Department"].replace({"HR": "Human Resources"})
print("\n15. Replacing 'HR' with 'Human Resources':")
print(df)

# 16. Duplicates: Check and remove
df.loc[len(df)] = df.iloc[0]  # Adding a duplicate row
print("\n16. DataFrame with Duplicate Row:")
print(df)
df = df.drop_duplicates()
print("\nDataFrame After Removing Duplicates:")
print(df)

# 17. Conditional column creation
df["High_Earner"] = df["Annual_Salary"].apply(lambda x: "Yes" if x > 60000 else "No")
print("\n17. DataFrame with 'High_Earner' Column:")
print(df)

# 18. Sampling data
sampled_data = df.sample(n=2)
print("\n18. Random Sample of 2 Rows:")
print(sampled_data)

# 19. Joining two DataFrames
additional_data = pd.DataFrame({
    "Employee": ["Alice", "Bob", "Charlie", "David", "Eva"],
    "Performance_Score": [85, 90, 88, 76, 92]
})
merged_df = pd.merge(df, additional_data, on="Employee")
print("\n19. Merged DataFrame:")
print(merged_df)

# 20. Creating a multi-index DataFrame
multi_index_df = df.set_index(["Department", "Employee"])
print("\n20. Multi-Index DataFrame:")
print(multi_index_df)

# 21. Dropping rows
df = df[df["Age"] > 25]  # Drop rows where Age <= 25
print("\n21. DataFrame After Dropping Rows (Age <= 25):")
print(df)

# 22. Creating dummy variables
dummy_df = pd.get_dummies(df["Department"])
print("\n22. Dummy Variables for Departments:")
print(dummy_df)

# 23. Correlation matrix
correlation_matrix = df[["Age", "Annual_Salary", "Years_at_Company"]].corr()
print("\n23. Correlation Matrix:")
print(correlation_matrix)

# 24. Simple plot
df.plot(x="Age", y="Annual_Salary", kind="scatter", title="Age vs Salary")
plt.xlabel("Age")
plt.ylabel("Annual Salary")
plt.show()

# 25. Export to Excel
df.to_excel("expanded_employee_data.xlsx", index=False)
print("\n25. Data exported to 'expanded_employee_data.xlsx'.")


# 26. Append a New Table to the Existing DataFrame
# Create a new table (DataFrame) to append
new_employees = pd.DataFrame({
    "Employee": ["Frank", "Grace"],
    "Department": ["Finance", "IT"],
    "Age": [33, 28],
    "Annual_Salary": [58000, 72000],
    "Years_at_Company": [2, 1]
})

# Append the new table to the original DataFrame
df = pd.concat([df, new_employees], ignore_index=True)
print("\n26. DataFrame After Appending New Employees:")
print(df)

# Verify the updated DataFrame structure
print("\nUpdated Shape of the DataFrame:", df.shape)


# 27. Transpose the DataFrame
transposed_df = df.T  # Transpose the DataFrame
print("\n27. Transposed DataFrame:")
print(transposed_df)









